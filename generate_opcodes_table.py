import json

def generate_code(block):
    format = block["mnemonic"]
    length = block["bytes"]
    cycles_min = block["cycles"][1 if len(block["cycles"]) > 1 else 0]
    cycles_max = block["cycles"][0]

    if len(block["operands"]) > 0:
        format += " "
        first = True
        for operand in block["operands"]:
            if not first:
                format += ","
            else:
                first = False
            
            bytes = operand.get("bytes", 0)
            if bytes > 0:
                format += "%0{}X".format(bytes * 2)
            else:
                format += operand["name"]

    return 'Opcode {{ format: "{}", length: {}, cycles_min: {}, cycles_max: {} }}'.format(format, length, cycles_min, cycles_max)

def loop_group(block):
    code = ""
    for opcode in range(0, 256):
        name = '0x{:02X}'.format(opcode)
        opcode_block = block[name]
        code += "\t{},\n".format(generate_code(opcode_block))
    return code

f = open('Opcodes.json')
data = json.load(f)
f.close()

f = open("src/opcodes.hpp", "w")
code = "// THIS FILE IS AUTO GENERATED BY generate_opcodes_table.py\n"
code += "#pragma once\n\n"
code += "#include \"opcode.hpp\"\n\n"

code += "const Opcode OPCODES[] = {\n"
code += loop_group(data["unprefixed"])
code += "};\n\n"

code += "const Opcode OPCODES_EXTENDED[] = {\n"
code += loop_group(data["cbprefixed"])
code += "};"

f.write(code)
f.close()